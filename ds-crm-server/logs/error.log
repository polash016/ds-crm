{"time":"2025-08-17T06:54:16.121Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/auth/login","requestId":"df6854a1-bfb9-4997-aa3c-d68cd2df810c","method":"POST","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.user.findUnique()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/auth/auth.service.ts:66:34\n\n  63 const loginUser = async (payload: { id: string; password: string }) => {\n  64   const { id, password } = payload;\n  65 \n→ 66   const user = await prisma.user.findUnique({\n         where: {\n           id: undefined,\n           isDeleted: false,\n       ?   email?: String,\n       ?   AND?: UserWhereInput | UserWhereInput[],\n       ?   OR?: UserWhereInput[],\n       ?   NOT?: UserWhereInput | UserWhereInput[],\n       ?   password?: StringFilter | String,\n       ?   roleId?: StringNullableFilter | String | Null,\n       ?   userType?: EnumUserTypeFilter | UserType,\n       ?   deletedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   role?: RoleNullableScalarRelationFilter | RoleWhereInput | Null,\n       ?   profile?: ProfileNullableScalarRelationFilter | ProfileWhereInput | Null\n         }\n       })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"time":"2025-08-17T06:55:20.194Z","level":"error","message":"secretOrPrivateKey must have a value","statusCode":500,"path":"/api/v1/auth/login","requestId":"1c203974-1a29-40d2-ad06-6df39674a170","method":"POST","errName":"Error","errMessage":"secretOrPrivateKey must have a value"}
{"time":"2025-08-17T06:55:40.186Z","level":"error","message":"secretOrPrivateKey must have a value","statusCode":500,"path":"/api/v1/auth/login","requestId":"4785b842-f6a6-4a10-a8b1-26e13fa3f0b4","method":"POST","errName":"Error","errMessage":"secretOrPrivateKey must have a value"}
{"time":"2025-08-17T06:59:08.744Z","level":"error","message":"secretOrPrivateKey must have a value","statusCode":500,"path":"/api/v1/auth/login","requestId":"51d9c433-09eb-4452-8200-55652b07fd4c","method":"POST","errName":"Error","errMessage":"secretOrPrivateKey must have a value"}
{"time":"2025-08-17T06:59:40.899Z","level":"error","message":"secretOrPrivateKey must have a value","statusCode":500,"path":"/api/v1/auth/login","requestId":"9ed19fc2-aa1f-4ae8-9f0a-c167631c8d5c","method":"POST","errName":"Error","errMessage":"secretOrPrivateKey must have a value"}
{"time":"2025-08-17T07:01:30.053Z","level":"error","message":"secretOrPrivateKey must have a value","statusCode":500,"path":"/api/v1/auth/login","requestId":"0d1936bd-acc0-4192-a76e-bd672c5f7488","method":"POST","errName":"Error","errMessage":"secretOrPrivateKey must have a value"}
{"time":"2025-08-17T07:10:34.556Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"ce7035c2-0fb6-4598-845f-9f3be617ab3c","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T07:16:26.150Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"aff592f2-0da2-4760-a2ff-d67c88375f2b","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T07:30:00.960Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"b8cd8347-5860-47fe-857a-580890d3f3ad","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T07:54:30.997Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"6fa77062-d235-4604-a315-02eea8843e8b","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T08:00:09.420Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"3ffd31bd-e5df-4b18-b6c7-19bc8666f729","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T08:05:14.198Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"783c2670-a357-41cd-95b5-6b15f92830d3","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T08:12:00.808Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"c05e9235-4a10-44b0-97a1-195c01d5b49c","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T09:31:52.048Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"2f60d4af-e413-4e47-b86b-379516507938","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T09:31:53.552Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"080de310-07e9-4989-89a5-979f22d262f5","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T10:06:10.076Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"ced5772e-90b4-4511-9bf2-66734d8fffbe","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T10:32:23.211Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"7631b24c-9783-4166-9afa-f4e92a3b58b5","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T11:31:21.489Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"5b263487-583a-49b0-ad6f-7948ce51893f","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T11:39:37.659Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"d3a8ae0c-2af9-486d-bfb6-f869dd408bf9","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-17T12:15:37.118Z","level":"error","message":"Unauthorized","statusCode":401,"path":"/api/v1/leads/upload-csv","requestId":"015869f5-494f-4309-a30d-554ee04a122c","method":"GET","errName":"Error","errMessage":"Unauthorized"}
{"time":"2025-08-17T12:16:02.210Z","level":"error","message":"Unauthorized","statusCode":401,"path":"/api/v1/leads/upload-csv","requestId":"b73dafd6-faa6-480d-a09f-7cb52aab0c49","method":"GET","errName":"Error","errMessage":"Unauthorized"}
{"time":"2025-08-17T12:16:16.375Z","level":"error","message":"Unauthorized","statusCode":401,"path":"/api/v1/leads/upload-csv","requestId":"23e69219-710b-4b4d-b8e4-dae5f00f0d21","method":"GET","errName":"Error","errMessage":"Unauthorized"}
{"time":"2025-08-17T12:17:14.485Z","level":"error","message":"Unauthorized","statusCode":401,"path":"/api/v1/leads/upload-csv","requestId":"10f5ea54-818e-4060-8e14-c123a6f25a75","method":"GET","errName":"Error","errMessage":"Unauthorized"}
{"time":"2025-08-17T12:19:19.612Z","level":"error","message":"Incorrect Password","statusCode":401,"path":"/api/v1/auth/login","requestId":"c06b6136-7707-4edb-8426-be4e1d7ba0fa","method":"POST","errName":"Error","errMessage":"Incorrect Password"}
{"time":"2025-08-17T12:20:11.347Z","level":"error","message":"\"undefined\" is not valid JSON","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"bbd33f8c-4720-49b3-9e1c-db16a7f2bcf8","method":"POST","errName":"SyntaxError","errMessage":"\"undefined\" is not valid JSON"}
{"time":"2025-08-17T12:20:46.541Z","level":"error","message":"\"undefined\" is not valid JSON","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"c96e3f1c-ae91-4a9b-8bbe-fe3baf67c492","method":"POST","errName":"SyntaxError","errMessage":"\"undefined\" is not valid JSON"}
{"time":"2025-08-17T12:21:28.706Z","level":"error","message":"\"undefined\" is not valid JSON","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"889c79de-23f7-401b-b8be-651ded34fe97","method":"POST","errName":"SyntaxError","errMessage":"\"undefined\" is not valid JSON"}
{"time":"2025-08-18T03:23:30.842Z","level":"error","message":"Cannot read properties of undefined (reading 'findMany')","statusCode":500,"path":"/api/v1/leads","requestId":"1a84aeb8-feda-423d-82f1-39d56f3a9799","method":"GET","errName":"TypeError","errMessage":"Cannot read properties of undefined (reading 'findMany')"}
{"time":"2025-08-18T04:33:46.626Z","level":"error","message":"Unauthorized","statusCode":401,"path":"/api/v1/users/my","requestId":"777fa03b-6cb8-4f26-9d8f-a14b9cefbf8f","method":"GET","errName":"Error","errMessage":"Unauthorized"}
{"time":"2025-08-18T04:33:46.842Z","level":"error","message":"\nInvalid `prisma.user.findUniqueOrThrow()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/user/user.service.ts:188:34\n\n  185 };\n  186 \n  187 const getUserById = async (id: string) => {\n→ 188   const user = await prisma.user.findUniqueOrThrow(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a query.","statusCode":500,"path":"/api/v1/users/undefined","requestId":"99557822-8360-458f-98e8-b838bdbb813e","method":"GET","errName":"PrismaClientKnownRequestError","errMessage":"\nInvalid `prisma.user.findUniqueOrThrow()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/user/user.service.ts:188:34\n\n  185 };\n  186 \n  187 const getUserById = async (id: string) => {\n→ 188   const user = await prisma.user.findUniqueOrThrow(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a query.","errCode":"P2025"}
{"time":"2025-08-18T04:33:46.850Z","level":"error","message":"Not Authorized","statusCode":401,"path":"/api/v1/auth/refresh-token","requestId":"9adb18dc-ef5e-43b6-a039-e0dab629887c","method":"POST","errName":"Error","errMessage":"Not Authorized"}
{"time":"2025-08-18T04:33:46.864Z","level":"error","message":"\nInvalid `prisma.user.findUniqueOrThrow()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/user/user.service.ts:188:34\n\n  185 };\n  186 \n  187 const getUserById = async (id: string) => {\n→ 188   const user = await prisma.user.findUniqueOrThrow(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a query.","statusCode":500,"path":"/api/v1/users/undefined","requestId":"b9a12368-348f-4062-9737-58875b4df57a","method":"GET","errName":"PrismaClientKnownRequestError","errMessage":"\nInvalid `prisma.user.findUniqueOrThrow()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/user/user.service.ts:188:34\n\n  185 };\n  186 \n  187 const getUserById = async (id: string) => {\n→ 188   const user = await prisma.user.findUniqueOrThrow(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a query.","errCode":"P2025"}
{"time":"2025-08-18T04:43:21.686Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"5bceac76-6436-4ee4-8e12-8072fd873809","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-18T04:56:53.532Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"6c89c00f-73b4-44c3-a3b6-2991747e9d15","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-18T05:03:03.670Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"e4936184-c067-4989-9f6c-b9c269a6cebe","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-18T07:09:40.986Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"364682d0-96e7-43ec-99f6-f3ff3d4faaa9","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-18T08:54:20.731Z","level":"error","message":"Only CSV files are allowed!","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"051fbc53-9ccd-4f98-a8e3-593a6e000530","method":"POST","errName":"Error","errMessage":"Only CSV files are allowed!"}
{"time":"2025-08-18T08:59:30.362Z","level":"error","message":"Only CSV files are allowed!","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"c58a19a7-9891-4535-97ca-dc88d6a4688a","method":"POST","errName":"Error","errMessage":"Only CSV files are allowed!"}
{"time":"2025-08-18T09:01:12.562Z","level":"error","message":"Only CSV files are allowed!","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"d9127812-a765-4efa-977a-7d18df581f99","method":"POST","errName":"Error","errMessage":"Only CSV files are allowed!"}
{"time":"2025-08-18T09:03:40.375Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"d3f56c39-50a5-4ce0-894f-2f1ff82f1e9e","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-18T09:08:38.164Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"bcff6352-add9-42ee-b390-05b33663f7e0","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-18T11:37:51.984Z","level":"error","message":"Unauthorized","statusCode":401,"path":"/api/v1/users/my","requestId":"94baa3c4-8a84-41a9-a786-a8382b14e890","method":"GET","errName":"Error","errMessage":"Unauthorized"}
{"time":"2025-08-18T11:37:52.189Z","level":"error","message":"\nInvalid `prisma.user.findUniqueOrThrow()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/user/user.service.ts:188:34\n\n  185 };\n  186 \n  187 const getUserById = async (id: string) => {\n→ 188   const user = await prisma.user.findUniqueOrThrow(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a query.","statusCode":500,"path":"/api/v1/users/undefined","requestId":"23441d38-054c-4caa-bf9c-5d02ff1eed0e","method":"GET","errName":"PrismaClientKnownRequestError","errMessage":"\nInvalid `prisma.user.findUniqueOrThrow()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/user/user.service.ts:188:34\n\n  185 };\n  186 \n  187 const getUserById = async (id: string) => {\n→ 188   const user = await prisma.user.findUniqueOrThrow(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a query.","errCode":"P2025"}
{"time":"2025-08-18T11:37:52.229Z","level":"error","message":"\nInvalid `prisma.user.findUniqueOrThrow()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/user/user.service.ts:188:34\n\n  185 };\n  186 \n  187 const getUserById = async (id: string) => {\n→ 188   const user = await prisma.user.findUniqueOrThrow(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a query.","statusCode":500,"path":"/api/v1/users/undefined","requestId":"0f674ff2-99da-4024-b318-6d6f95051232","method":"GET","errName":"PrismaClientKnownRequestError","errMessage":"\nInvalid `prisma.user.findUniqueOrThrow()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/user/user.service.ts:188:34\n\n  185 };\n  186 \n  187 const getUserById = async (id: string) => {\n→ 188   const user = await prisma.user.findUniqueOrThrow(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a query.","errCode":"P2025"}
{"time":"2025-08-18T11:49:38.045Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"7234f85c-5fab-4585-9460-4efce7b32f6a","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-18T12:16:48.304Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"e194f886-56ee-4d6b-9769-1fb36bc675a8","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-18T12:16:51.907Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=m&page=1&limit=10","requestId":"0b91067c-d470-457b-8adc-517ee9e04172","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:59:37\n\n  56 const whereConditions: Prisma.LeadsWhereInput =\n  57   andConditions.length > 0 ? { AND: andConditions } : {};\n  58 \n→ 59 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:16:51.910Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=mo&page=1&limit=10","requestId":"1299a9a0-bf10-49a4-ac62-5af827878bae","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:59:37\n\n  56 const whereConditions: Prisma.LeadsWhereInput =\n  57   andConditions.length > 0 ? { AND: andConditions } : {};\n  58 \n→ 59 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:16:52.564Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=mor&page=1&limit=10","requestId":"b92712f8-63cc-4765-922c-f80c68dc063f","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:59:37\n\n  56 const whereConditions: Prisma.LeadsWhereInput =\n  57   andConditions.length > 0 ? { AND: andConditions } : {};\n  58 \n→ 59 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:16:53.944Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=mors&page=1&limit=10","requestId":"eba4a5be-c0cd-4803-84af-b7902c857a30","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:59:37\n\n  56 const whereConditions: Prisma.LeadsWhereInput =\n  57   andConditions.length > 0 ? { AND: andConditions } : {};\n  58 \n→ 59 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:16:54.916Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=morsh&page=1&limit=10","requestId":"5bc8c6b4-b882-43d6-9264-2c52fea8e6e4","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:59:37\n\n  56 const whereConditions: Prisma.LeadsWhereInput =\n  57   andConditions.length > 0 ? { AND: andConditions } : {};\n  58 \n→ 59 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"morsh\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"morsh\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"morsh\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"morsh\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"morsh\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"morsh\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"morsh\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:16:55.161Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=morshe&page=1&limit=10","requestId":"da32f8e4-95ac-4ca8-a59d-d1a8f71ecfb1","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:59:37\n\n  56 const whereConditions: Prisma.LeadsWhereInput =\n  57   andConditions.length > 0 ? { AND: andConditions } : {};\n  58 \n→ 59 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"morshe\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"morshe\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"morshe\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"morshe\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"morshe\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"morshe\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"morshe\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:16:55.395Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=morshed&page=1&limit=10","requestId":"e3bdd909-b7ac-4f63-9263-2243d54a08fd","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:59:37\n\n  56 const whereConditions: Prisma.LeadsWhereInput =\n  57   andConditions.length > 0 ? { AND: andConditions } : {};\n  58 \n→ 59 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"morshed\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"morshed\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"morshed\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"morshed\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"morshed\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"morshed\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"morshed\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:18:25.322Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=mo&page=1&limit=10","requestId":"2cd7ef7c-4d96-45cb-945e-992d5de3f44d","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:61:37\n\n  58 const whereConditions: Prisma.LeadsWhereInput =\n  59   andConditions.length > 0 ? { AND: andConditions } : {};\n  60 \n→ 61 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:18:25.336Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=mor&page=1&limit=10","requestId":"5a7142ce-ffe0-49f6-b622-38e942387ea5","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:61:37\n\n  58 const whereConditions: Prisma.LeadsWhereInput =\n  59   andConditions.length > 0 ? { AND: andConditions } : {};\n  60 \n→ 61 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:18:25.556Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=mors&page=1&limit=10","requestId":"39ab41b2-93e9-4398-944f-9b7877b27bd5","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:61:37\n\n  58 const whereConditions: Prisma.LeadsWhereInput =\n  59   andConditions.length > 0 ? { AND: andConditions } : {};\n  60 \n→ 61 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 items: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"mors\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:30:15.774Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=mor&page=1&limit=10","requestId":"ed40b9b2-b325-41bf-a44e-4457cc5bcb36","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:61:37\n\n  58 const whereConditions: Prisma.LeadsWhereInput =\n  59   andConditions.length > 0 ? { AND: andConditions } : {};\n  60 \n→ 61 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"mor\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:30:15.832Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=mo&page=1&limit=10","requestId":"1fb31c5e-f13e-438c-8cd8-af48f32a158b","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:61:37\n\n  58 const whereConditions: Prisma.LeadsWhereInput =\n  59   andConditions.length > 0 ? { AND: andConditions } : {};\n  60 \n→ 61 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"mo\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-18T12:30:15.887Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads?searchTerm=m&page=1&limit=10","requestId":"ba70c76b-86a1-4727-8934-2337279e7662","method":"GET","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/ds-crm-server/src/app/module/lead/lead.service.ts:61:37\n\n  58 const whereConditions: Prisma.LeadsWhereInput =\n  59   andConditions.length > 0 ? { AND: andConditions } : {};\n  60 \n→ 61 const result = await prisma.leads.findMany({\n       where: {\n         AND: [\n           {\n             OR: [\n               {\n                 name: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 phone: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 address: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 source: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 price: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               },\n               {\n                 status: {\n                   contains: \"m\",\n                   mode: \"insensitive\"\n                 }\n               }\n             ]\n           }\n         ]\n       },\n       skip: 0,\n       take: 10,\n       orderBy: {\n         createdAt: \"desc\"\n       }\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"time":"2025-08-19T03:18:30.319Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"567f0dc0-a6c3-47e0-b30e-00f8020afdba","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T03:18:30.370Z","level":"error","message":"Not Authorized","statusCode":401,"path":"/api/v1/auth/refresh-token","requestId":"7a307660-bd4c-4091-a948-e1b688180bd6","method":"POST","errName":"Error","errMessage":"Not Authorized"}
{"time":"2025-08-19T03:18:30.396Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"d8d6d9ba-d93a-4c9e-b650-d1d68a5d3414","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T04:56:39.399Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"946cfbdc-de14-4e5e-be71-f44656822d08","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T04:56:40.088Z","level":"error","message":"Not Authorized","statusCode":401,"path":"/api/v1/auth/refresh-token","requestId":"b651af9e-50b2-492c-8c93-529490ad58b7","method":"POST","errName":"Error","errMessage":"Not Authorized"}
{"time":"2025-08-19T04:56:41.164Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"11b82bcc-0952-4f85-af61-31d8305f9451","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T04:57:50.454Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"d5ce4a1d-d4bb-4e7c-85be-5c60b85368a1","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T04:57:50.809Z","level":"error","message":"Not Authorized","statusCode":401,"path":"/api/v1/auth/refresh-token","requestId":"a0287bce-c08a-4382-876c-d8e72509ce88","method":"POST","errName":"Error","errMessage":"Not Authorized"}
{"time":"2025-08-19T04:57:51.833Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"9fdb87fb-bfa3-4ce0-a405-56a21d385d5e","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T05:13:57.161Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/leads/bulk-assign","requestId":"9443693b-1cba-4f5f-8218-2cc269938cf3","method":"PATCH","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T05:13:57.242Z","level":"error","message":"Not Authorized","statusCode":401,"path":"/api/v1/auth/refresh-token","requestId":"96a59001-4856-45dc-91c6-8c6286ceff51","method":"POST","errName":"Error","errMessage":"Not Authorized"}
{"time":"2025-08-19T05:13:57.282Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/leads/bulk-assign","requestId":"b0d15600-6c1d-4b40-a6b9-efa26e90f63a","method":"PATCH","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T05:15:35.512Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/leads/bulk-assign","requestId":"2539528f-c2b0-490b-a3c3-b21bf93f4961","method":"PATCH","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T05:15:35.531Z","level":"error","message":"Not Authorized","statusCode":401,"path":"/api/v1/auth/refresh-token","requestId":"9e2a638c-0c65-45cc-a18e-92a98b426aaa","method":"POST","errName":"Error","errMessage":"Not Authorized"}
{"time":"2025-08-19T05:15:35.551Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/leads/bulk-assign","requestId":"85a180b1-66fc-4a72-9217-306b9ca40f2b","method":"PATCH","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T05:16:57.277Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/leads/bulk-assign","requestId":"b1199e7a-f172-43f0-8dd2-2cdbe2e97449","method":"PATCH","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T05:16:57.317Z","level":"error","message":"Not Authorized","statusCode":401,"path":"/api/v1/auth/refresh-token","requestId":"187a752e-fb35-42b6-93ee-63fb15733630","method":"POST","errName":"Error","errMessage":"Not Authorized"}
{"time":"2025-08-19T05:16:57.348Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/leads/bulk-assign","requestId":"4e2ab3db-de7e-4c90-a8c0-89c8b692aeb1","method":"PATCH","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T05:18:41.340Z","level":"error","message":"Lead not found","statusCode":404,"path":"/api/v1/leads/bulk-assign","requestId":"2f80a9aa-5d3b-41e8-9c31-45f9c56da669","method":"PATCH","errName":"Error","errMessage":"Lead not found"}
{"time":"2025-08-19T05:20:08.951Z","level":"error","message":"Lead not found","statusCode":404,"path":"/api/v1/leads/bulk-assign","requestId":"f97c777a-9345-4a47-a12e-f12f8dbc1f0f","method":"PATCH","errName":"Error","errMessage":"Lead not found"}
{"time":"2025-08-19T05:26:03.646Z","level":"error","message":"Lead not found","statusCode":404,"path":"/api/v1/leads/bulk-assign","requestId":"90fb3fb2-1c87-48ee-92a9-81423a83f132","method":"PATCH","errName":"Error","errMessage":"Lead not found"}
{"time":"2025-08-19T05:30:12.418Z","level":"error","message":"Lead not found","statusCode":404,"path":"/api/v1/leads/bulk-assign","requestId":"de52ddb5-8bb5-442c-a78f-aceda510f7ae","method":"PATCH","errName":"Error","errMessage":"Lead not found"}
{"time":"2025-08-19T05:32:36.904Z","level":"error","message":"Lead not found","statusCode":404,"path":"/api/v1/leads/bulk-assign","requestId":"c9e8fddb-fefb-4831-bebb-dbbbb0bc5b94","method":"PATCH","errName":"Error","errMessage":"Lead not found"}
{"time":"2025-08-19T05:36:58.825Z","level":"error","message":"Lead not found","statusCode":404,"path":"/api/v1/leads/bulk-assign","requestId":"9bcb0e2a-579f-4e21-9d0d-865223c7ccbd","method":"PATCH","errName":"Error","errMessage":"Lead not found"}
{"time":"2025-08-19T05:40:56.491Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"5afa722d-c8f6-426c-9f91-33c496e6b9ae","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T05:40:56.547Z","level":"error","message":"Not Authorized","statusCode":401,"path":"/api/v1/auth/refresh-token","requestId":"ba6e5086-f304-406f-8a24-7482c64302f3","method":"POST","errName":"Error","errMessage":"Not Authorized"}
{"time":"2025-08-19T05:40:56.985Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"f0c1b8b8-5d13-44c8-8c17-654b742a36b1","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T05:48:12.868Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads/bulk-assign","requestId":"a398f9a6-baad-41a7-8ac3-48ebedc94243","method":"PATCH","errName":"ZodError","errMessage":"[\n  {\n    \"expected\": \"string\",\n    \"code\": \"invalid_type\",\n    \"path\": [\n      \"body\",\n      \"leadIds\",\n      0\n    ],\n    \"message\": \"Invalid input: expected string, received null\"\n  },\n  {\n    \"expected\": \"string\",\n    \"code\": \"invalid_type\",\n    \"path\": [\n      \"body\",\n      \"leadIds\",\n      1\n    ],\n    \"message\": \"Invalid input: expected string, received null\"\n  }\n]"}
{"time":"2025-08-19T05:49:07.439Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads/bulk-assign","requestId":"51c16fd3-8339-43be-b549-7bfbf3ea547e","method":"PATCH","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/DS-CRM/ds-crm-server/src/app/module/lead/lead.service.ts:203:44\n\n  200 }\n  201 \n  202 // Verify that all leads exist\n→ 203 const existingLeads = await prisma.leads.findMany({\n        where: {\n          id: {\n            in: [\n              null,\n              null\n            ]\n            ~~~~~~\n          }\n        }\n      })\n\nArgument `in`: Invalid value provided. Expected ListStringFieldRefInput, provided (Null, Null)."}
{"time":"2025-08-19T05:51:37.278Z","level":"error","message":"Validation Error","statusCode":400,"path":"/api/v1/leads/bulk-assign","requestId":"fb285b02-4691-484e-b7ba-10c1a4ba97ba","method":"PATCH","errName":"PrismaClientValidationError","errMessage":"\nInvalid `prisma.leads.findMany()` invocation in\n/home/ds/Projects/DS-CRM/ds-crm-server/src/app/module/lead/lead.service.ts:203:44\n\n  200 }\n  201 \n  202 // Verify that all leads exist\n→ 203 const existingLeads = await prisma.leads.findMany({\n        where: {\n          id: {\n            in: [\n              null,\n              null\n            ]\n            ~~~~~~\n          }\n        }\n      })\n\nArgument `in`: Invalid value provided. Expected ListStringFieldRefInput, provided (Null, Null)."}
{"time":"2025-08-19T06:36:29.957Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"8901af18-1b54-48b0-8c9f-c5008bb10027","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T07:07:45.091Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"4ad886e4-85f4-4717-8467-f9bea3e1d9fa","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T07:15:43.227Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"8a97c47d-3605-40c9-9480-c36932e03418","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T08:40:06.363Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"99b20c6b-4bca-4600-bffd-c65dd0815c45","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T08:46:49.371Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"6860a8ae-f61f-4ca0-8b44-f6b11bc28900","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T09:24:07.300Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"436b4700-aa04-4381-865d-b704d7bfbec6","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T09:36:21.778Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"be89a65a-effd-42a0-b248-33dee39640de","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T09:41:52.340Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"9a937f53-b6e0-48c6-96c7-e0ff3f821248","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
{"time":"2025-08-19T09:42:32.256Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"688fd6cd-45a4-4558-b254-eef50d6fdf47","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-19T09:42:32.366Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"c4b56d77-63fb-48b3-a96c-f50b12a00d97","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-19T09:45:31.983Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"ba612987-9c38-4fef-8e65-7588c51d969b","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-19T09:45:32.086Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"c3e9a87c-e9d6-408b-8dc7-4cffb3bdfa87","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-19T09:46:01.095Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"c9406ef1-5a69-4f58-9438-fc39a75063a9","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-19T09:46:01.189Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"43a437ec-622a-41f1-b2e6-46c5aaed02aa","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-19T09:49:10.188Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"179f8bcb-e1f2-4eee-bf1d-b189e9587ebc","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-19T09:49:10.284Z","level":"error","message":"Error processing CSV file","statusCode":500,"path":"/api/v1/leads/upload-csv","requestId":"9568f7fb-73f6-46ae-9cf7-e65882f113a4","method":"POST","errName":"Error","errMessage":"Error processing CSV file"}
{"time":"2025-08-19T09:54:27.839Z","level":"error","message":"jwt expired","statusCode":500,"path":"/api/v1/users/my","requestId":"78cda360-cd28-40e3-aa43-2699e27c9ace","method":"GET","errName":"TokenExpiredError","errMessage":"jwt expired"}
